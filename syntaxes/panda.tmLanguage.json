{
	"$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
	"name": "panda language syntax",
	"scopeName": "source.panda",
	"patterns": [
		{
			"include": "#comments"
		},
		{
			"include": "#keywords"
		},
		{
			"include": "#strings"
		},
		{
			"include": "#raw_strings"
		},
		{
			"include": "#builtin_functions"
		},
		{
			"include": "#modifiers"
		},
		{
			"include": "#namespace"
		},
		{
			"include": "#imports"
		},
		{
			"include": "#constants"
		}
	],
	"repository": {
		"keywords": {
			"patterns": [
				{
					"comment": "flow control keywords",
					"match": "\\b(await|break|case|catch|continue|default|else|for|foreach|if|in|return|select|switch|throw|try)\\b",
					"name": "keyword.control.pd"
				},
				{
					"match": "\\bconst\\b",
					"name": "keyword.const.pd"
				},
				{
					"match": "\\bvar\\b",
					"name": "keyword.var.pd"
				},
				{
					"match": "\\bthis\\b",
					"name": "keyword.this.pd"
				},
				{
					"match": "\\bbase\\b",
					"name": "keyword.base.pd"
				},				
				{
					"match": "\\bfunction\\b",
					"name": "keyword.function.pd"
				},
				{
					"match": "\\benum\\b",
					"name": "keyword.enum.pd"
				},
				{
					"match": "\\binterface\\b",
					"name": "keyword.interface.pd"
				},
				{
					"match": "\\bclass\\b",
					"name": "keyword.class.pd"
				}
			]
		},
		"builtin_functions":{
			"comment": "built-in functions",
			"match": "\\b(new|print|print_line)\\b(?=\\()",
			"name": "support.function.builtin.pd"
		},
		"modifiers": {
			"comment": "Language modifier",
			"match": "\\b(public|static|weak)\\s+",
			"name": "storage.modifier.pd"
		},
		"strings": {
			"comment": "interpreted string literals",
			"name": "string.quoted.double.pd",
			"begin": "\"",
			"beginCaptures": {
				"0": {
					"name": "punctuation.definition.string.begin.pd"
				}
			},
			"end": "\"",
			"endCaptures": {
				"0": {
					"name": "punctuation.definition.string.end.pd"
				}
			},
			"patterns": [
				{
					"include": "#string_escaped_char"
				},
				{
					"include": "#string_placeholder"
				}
			]
		},
		"raw_strings":{
			"comment": "raw string literals",
			"name": "string.quoted.raw.pd",
			"begin": "`",
			"beginCaptures": {
				"0": {
					"name": "punctuation.definition.string.begin.pd"
				}
			},
			"end": "`",
			"endCaptures": {
				"0": {
					"name": "punctuation.definition.string.end.pd"
				}
			},
			"patterns": [
				{
					"include": "#string_placeholder"
				}
			]
		},
		"string_escaped_char": {
			"patterns": [
				{
					"name": "constant.character.escape.pd",
					"match": "\\\\([0-7]{3}|[abfnrtv\\\\'\"]|x[0-9a-fA-F]{2}|u[0-9a-fA-F]{4}|U[0-9a-fA-F]{8})"
				},
				{
					"name": "invalid.illegal.unknown-escape.pd",
					"match": "\\\\[^0-7xuUabfnrtv\\'\"]"
				}
			]
		},
		"string_placeholder": {
			"patterns": [
				{
					"name": "constant.other.placeholder.pd",
					"match": "%(\\[\\d+\\])?([\\+#\\-0\\x20]{,2}((\\d+|\\*)?(\\.?(\\d+|\\*|(\\[\\d+\\])\\*?)?(\\[\\d+\\])?)?))?[vT%tbcdoqxXUbeEfFgGspw]"
				}
			]
		},		
		"comments": {
			"patterns": [
				{
					"name": "comment.block.pd",
					"begin": "(\\/\\*)",
					"beginCaptures": {
						"1": {
							"name": "punctuation.definition.comment.pd"
						}
					},
					"end": "(\\*\\/)",
					"endCaptures": {
						"1": {
							"name": "punctuation.definition.comment.pd"
						}
					}
				},
				{
					"name": "comment.line.double-slash.pd",
					"begin": "(\\/\\/)",
					"beginCaptures": {
						"1": {
							"name": "punctuation.definition.comment.go"
						}
					},
					"end": "(?:\\n|$)"
				}
			]
		},
		"imports": {
			"begin": "\\b(import)\\s*",
			"beginCaptures": {
				"1": {
					"name": "keyword.other.import.pd"
				}
			},
			"end": "(?=;)",
			"patterns": [
				{
					"name": "entity.name.type.namespace.pd",
					"match": "@?[_[:alpha:]][_[:alnum:]]*"
				}
			]
		},
		"namespace": {
			"begin": "\\b(namespace)\\s*",
			"beginCaptures": {
				"1": {
					"name": "keyword.other.namespace.pd"
				}
			},
			"end": "(?=;)",
			"patterns": [
				{
					"name": "entity.name.type.namespace.pd",
					"match": "@?[_[:alpha:]][_[:alnum:]]*"
				}
			]
		},
		"constants": {
			"comment": "language constants",
			"match": "\\b(true|false|null)\\b",
			"name": "constant.language.pd"
		}
	}
}