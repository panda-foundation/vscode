{
	"$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
	"name": "panda language syntax",
	"scopeName": "source.panda",
	"patterns": [
		{
			"include": "#comments"
		},
		{
			"include": "#metadata"
		},
		{
			"include": "#namespace"
		},
		{
			"include": "#imports"
		},
		{
			"include": "#literal"
		},
		{
			"include": "#modifiers"
		},
		{
			"include": "#builtin_functions"
		},
		{
			"include": "#functions"
		},
		{
			"include": "#builtin_types"
		},
		{
			"include": "#enum_class_interface"
		},
		{
			"include": "#keywords"
		}
	],
	"repository": {
		"keywords": {
			"patterns": [
				{
					"match": "\\b(await|break|case|catch|continue|default|else|for|foreach|if|in|return|select|switch|throw|try)\\b",
					"name": "keyword.control.pd"
				},
				{
					"match": "\\b(this|base)\\b",
					"name": "variable.language.pd"
				}
			]
		},
		"builtin_functions":{
			"match": "\\b(new|print|print_line)\\b(?=\\()",
			"name": "support.function.builtin.pd"
		},
		"modifiers": {
			"match": "\\b(public|static|weak)\\b",
			"name": "storage.modifier.pd"
		},
		"strings": {
			"begin": "\"",
			"beginCaptures": {
				"0": {
					"name": "punctuation.definition.string.begin.pd"
				}
			},
			"end": "\"",
			"endCaptures": {
				"0": {
					"name": "punctuation.definition.string.end.pd"
				}
			},
			"patterns": [
				{
					"include": "#string-character-escape"
				}
			],
			"name": "string.quoted.double.pd"
		},
		"raw_strings":{
			"begin": "`",
			"beginCaptures": {
				"0": {
					"name": "punctuation.definition.string.begin.pd"
				}
			},
			"end": "`",
			"endCaptures": {
				"0": {
					"name": "punctuation.definition.string.end.pd"
				}
			},
			"name": "string.quoted.other.raw.pd"
		},
		"string-character-escape": {
			"match": "\\\\(['\"\\\\0abfnrtv]|x[0-9a-fA-F]{1,4}|U[0-9a-fA-F]{8}|u[0-9a-fA-F]{4})",
			"name": "constant.character.escape.pd"
		},
		"character": {
			"name": "string.quoted.single.pd",
			"begin": "'",
			"beginCaptures": {
				"0": {
					"name": "punctuation.definition.char.begin.pd"
				}
			},
			"end": "(\\')|((?:[^\\\\\\n])$)",
			"endCaptures": {
				"1": {
					"name": "punctuation.definition.char.end.pd"
				},
				"2": {
					"name": "invalid.illegal.newline.pd"
				}
			},
			"patterns": [
				{
					"include": "#char-character-escape"
				}
			]
		},
		"char-character-escape": {
			"name": "constant.character.escape.pd",
			"match": "\\\\(['\"\\\\0abfnrtv]|x[0-9a-fA-F]{1,4}|u[0-9a-fA-F]{4})"
		},
		"numeric": {
			"patterns": [
				{
					"name": "constant.numeric.hex.pd",
					"match": "\\b0(x|X)[0-9a-fA-F_]+(U|u|L|l|UL|Ul|uL|ul|LU|Lu|lU|lu)?\\b"
				},
				{
					"name": "constant.numeric.binary.pd",
					"match": "\\b0(b|B)[01_]+(U|u|L|l|UL|Ul|uL|ul|LU|Lu|lU|lu)?\\b"
				},
				{
					"name": "constant.numeric.decimal.pd",
					"match": "\\b([0-9_]+)?\\.[0-9_]+((e|E)[0-9]+)?(F|f|D|d|M|m)?\\b"
				},
				{
					"name": "constant.numeric.decimal.pd",
					"match": "\\b[0-9_]+(e|E)[0-9_]+(F|f|D|d|M|m)?\\b"
				},
				{
					"name": "constant.numeric.decimal.pd",
					"match": "\\b[0-9_]+(F|f|D|d|M|m)\\b"
				},
				{
					"name": "constant.numeric.decimal.pd",
					"match": "\\b[0-9_]+(U|u|L|l|UL|Ul|uL|ul|LU|Lu|lU|lu)?\\b"
				}
			]
		},
		"constants": {
			"match": "\\b(true|false|null)\\b",
			"name": "constant.language.pd"
		},
		"builtin_types": {
			"match": "\\b(bool|char|i8|i16|i32|i64|u8|u16|u32|u64|sbyte|short|int|long|byte|ushort|uint|ulong|f32|f64|float|double|string|void)\\b",
			"captures": {
				"1": {
					"name": "storage.type.pd"
				}
			}
		},
		"literal": {
			"patterns": [
				{
					"include": "#constants"
				},
				{
					"include": "#numeric"
				},
				{
					"include": "#character"
				},
				{
					"include": "#strings"
				},
				{
					"include": "#raw_strings"
				}
			]
		},
		"comments": {
			"patterns": [
				{
					"name": "comment.block.pd",
					"begin": "(\\/\\*)",
					"beginCaptures": {
						"1": {
							"name": "punctuation.definition.comment.pd"
						}
					},
					"end": "(\\*\\/)",
					"endCaptures": {
						"1": {
							"name": "punctuation.definition.comment.pd"
						}
					}
				},
				{
					"name": "comment.line.double-slash.pd",
					"begin": "(\\/\\/)",
					"beginCaptures": {
						"1": {
							"name": "punctuation.definition.comment.pd"
						}
					},
					"end": "(?:\\n|$)"
				}
			]
		},
		"imports": {
			"begin": "\\b(import)\\b",
			"beginCaptures": {
				"1": {
					"name": "keyword.other.using.pd"
				}
			},
			"end": "(?=;)",
			"patterns": [
				{
					"match": "[_[:alpha:]][_[:alnum:]]*",
					"name": "entity.name.type.import.pd"
				}
			]
		},
		"namespace": {
			"begin": "\\b(namespace)\\b",
			"beginCaptures": {
				"1": {
					"name": "keyword.other.namespace.pd"
				}
			},
			"end": "(?=;)",
			"patterns": [
				{
					"match": "[_[:alpha:]][_[:alnum:]]*",
					"name": "entity.name.type.namespace.pd"
				}
			]
		},
		"types": {
			"patterns": [
				{
					"match": "([_[:alpha:]][_[:alnum:]]*)(\\.)",
					"captures": {
						"1": {
							"name": "storage.type.pd"
						},
						"2": {
							"name": "punctuation.accessor.pd"
						}
					}
				},
				{
					"match": "(\\.)([_[:alpha:]][_[:alnum:]]*)",
					"captures": {
						"1": {
							"name": "punctuation.accessor.pd"
						},
						"2": {
							"name": "storage.type.pd"
						}
					}
				},
				{
					"match": "[_[:alpha:]][_[:alnum:]]*",
					"name": "storage.type.pd"
				}
			]
		},
		"functions": {
			"begin": "\\bfunction\\s+([_[:alpha:]][_[:alnum:]]*)",
			"beginCaptures": {
				"1": {
					"name": "support.function.builtin.pd"
				}
			},
			"end": "(?:\\n|{$)",
			"patterns": [
				{
					"include": "#literal"
				},
				{
					"match": "[_[:alpha:]][_[:alnum:]]*",
					"name": "entity.name.type.pd"
				}
			]
		},
		"enum_class_interface": {
			"begin": "\\b(enum|class|interface)\\b\\s+([_[:alpha:]][_[:alnum:]]*)(:)?",
			"beginCaptures": {
				"1": {
					"name": "storage.type.pd"
				},
				"2": {
					"name": "entity.name.type.pd"
				}
			},
			"end": "(?:\\n|{$)",
			"patterns": [
				{
					"match": "[_[:alpha:]][_[:alnum:]]*",
					"name": "entity.name.type.pd"
				}
			]
		},
		"metadata": {
			"begin": "(@[_[:alpha:]][_[:alnum:]]*)",
			"beginCaptures": {
				"1": {
					"name": "entity.name.tag.pd"
				}
			},
			"end": "(?:\\n|$)",
			"patterns": [
				{
					"include": "#literal"
				},
				{
					"match": "[_[:alpha:]][_[:alnum:]]*",
					"name": "entity.name.type.pd"
				}
			]
		}
	}
}