{
	"$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
	"name": "panda language syntax",
	"scopeName": "source.panda",
	"patterns": [
		{
			"include": "#comments"
		},
		{
			"include": "#keywords"
		},
		{
			"include": "#strings"
		},
		{
			"include": "#raw_strings"
		},
		{
			"include": "#builtin_functions"
		},
		{
			"include": "#modifiers"
		},
		{
			"include": "#namespace"
		},
		{
			"include": "#imports"
		},
		{
			"include": "#constants"
		},
		{
			"include": "#functions"
		},
		{
			"include": "#scalar"
		},
		{
			"include": "#metadata"
		}
	],
	"repository": {
		"keywords": {
			"patterns": [
				{
					"match": "\\b(await|break|case|catch|continue|default|else|for|foreach|if|in|return|select|switch|throw|try)\\b",
					"name": "keyword.control.pd"
				},
				{
					"match": "\\b(this|base)\\b",
					"name": "variable.language.pd"
				},
				{
					"match": "\\b(const|var|function|enum|interface|class)\\b",
					"name": "storage.type.pd"
				}
			]
		},
		"builtin_functions":{
			"match": "\\b(new|print|print_line)\\b(?=\\()",
			"name": "support.function.builtin.pd"
		},
		"modifiers": {
			"match": "\\b(public|static|weak)\\s+",
			"name": "storage.modifier.pd"
		},
		"strings": {
			"begin": "\"",
			"beginCaptures": {
				"0": {
					"name": "punctuation.definition.string.begin.pd"
				}
			},
			"end": "\"",
			"endCaptures": {
				"0": {
					"name": "punctuation.definition.string.end.pd"
				}
			},
			"patterns": [
				{
					"include": "#string-character-escape"
				}
			],
			"name": "string.quoted.double.pd"
		},
		"raw_strings":{
			"begin": "`",
			"beginCaptures": {
				"0": {
					"name": "punctuation.definition.string.begin.pd"
				}
			},
			"end": "`",
			"endCaptures": {
				"0": {
					"name": "punctuation.definition.string.end.pd"
				}
			},
			"name": "string.quoted.other.raw.pd"
		},
		"string-character-escape": {
			"match": "\\\\(['\"\\\\0abfnrtv]|x[0-9a-fA-F]{1,4}|U[0-9a-fA-F]{8}|u[0-9a-fA-F]{4})",
			"name": "constant.character.escape.pd"
		},
		"comments": {
			"patterns": [
				{
					"name": "comment.block.pd",
					"begin": "(\\/\\*)",
					"beginCaptures": {
						"1": {
							"name": "punctuation.definition.comment.pd"
						}
					},
					"end": "(\\*\\/)",
					"endCaptures": {
						"1": {
							"name": "punctuation.definition.comment.pd"
						}
					}
				},
				{
					"name": "comment.line.double-slash.pd",
					"begin": "(\\/\\/)",
					"beginCaptures": {
						"1": {
							"name": "punctuation.definition.comment.pd"
						}
					},
					"end": "(?:\\n|$)"
				}
			]
		},
		"imports": {
			"begin": "\\b(import)\\s*",
			"beginCaptures": {
				"1": {
					"name": "keyword.other.using.pd"
				}
			},
			"end": "(?=;)",
			"patterns": [
				{
					"match": "@?[_[:alpha:]][_[:alnum:]]*",
					"name": "entity.name.type.import.pd"
				}
			]
		},
		"namespace": {
			"begin": "\\b(namespace)\\s*",
			"beginCaptures": {
				"1": {
					"name": "keyword.other.namespace.pd"
				}
			},
			"end": "(?=;)",
			"patterns": [
				{
					"match": "@?[_[:alpha:]][_[:alnum:]]*",
					"name": "entity.name.type.namespace.pd"
				}
			]
		},
		"constants": {
			"match": "\\b(true|false|null)\\b",
			"name": "constant.language.pd"
		},
		"scalar": {
			"match": "\\b(bool|char|i8|i16|i32|i64|u8|u16|u32|u64|sbyte|short|int|long|byte|ushort|uint|ulong|f32|f64|float|double|string|void)\\b",
			"captures": {
				"1": {
					"name": "storage.type.pd"
				}
			}
		},
		"functions": {
			"match": "^(\\bfunction\\b)(?:\\s+(\\([^\\)]+\\)\\s+)?(\\w+)(?=\\())?",
			"captures": {
				"1": {
					"name": "keyword.function.pd"
				},
				"2": {
					"patterns": [
						{
							"match": "\\d\\w*",
							"name": "invalid.illegal.identifier.pd"
						},
						{
							"match": "\\w+",
							"name": "entity.name.function.pd"
						}
					]
				}
			}
		},
		"metadata": {
			"patterns": [
				{
					"begin": "@doc|@emit",
					"beginCaptures": {
						"0": {
							"name": "entity.name.tag.pd"
						}
					},
					"end": "(?:\\n|$)",
					"patterns": [
						{
							"include": "#strings"
						},
						{
							"include": "#raw_strings"
						}
					]
				}
			]
		}
	}
}